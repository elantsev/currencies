{"version":3,"sources":["components/Data.js","components/util/baseToEUR.js","components/ContainerApilayer.js","components/ContainerFloatrates.js","components/ContainerOpenEx.js","App.js","serviceWorker.js","index.js"],"names":["Data","header","currencies","EURAUD","EURUSD","EURNOK","defaultProps","baseToEUR","USDAUD","USDEUR","USDNOK","toFixed","ContainerApilayer","useState","setCurrencies","useEffect","fetch","then","response","json","data","quotes","ContainerFloatrates","text","str","window","DOMParser","parseFromString","items","querySelectorAll","i","length","querySelector","innerHTML","ContainerOpenEx","rates","AUD","EUR","NOK","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAIA,SAASA,EAAT,GAAmE,IAAnDC,EAAkD,EAAlDA,OAAkD,IAA1CC,WAAcC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OACpD,OACE,6BACE,4BAAKJ,GACL,2BAAIE,GACJ,2BAAIC,GACJ,2BAAIC,IAKKL,QAWfA,EAAKM,aAAe,CAClBJ,WAAY,CACVC,OAAQ,MACRC,OAAQ,MACRC,OAAQ,Q,WC9BG,SAASE,EAAUC,EAAQC,EAAQC,GAIhD,MAAO,CAAEP,QAHKK,EAASC,GAAQE,QAAQ,GAGtBP,QAFH,EAAIK,GAAQE,QAAQ,GAETN,QADXK,EAASD,GAAQE,QAAQ,ICsB1BC,MArBf,WAA8B,IAAD,EACSC,mBAAS,IADlB,mBACpBX,EADoB,KACRY,EADQ,KAkB3B,OAfAC,qBAAU,WACRC,MACE,4EAECC,MAAK,SAASC,GACb,OAAOA,EAASC,UAEjBF,MAAK,SAASG,GAAO,IAAD,EACgBA,EAAKC,OAEpCnB,EAAaK,EAHE,EACXC,OADW,EACHC,OADG,EACKC,QAGxBI,EAAcZ,QAEjB,IAEI,kBAAC,EAAD,CAAMA,WAAYA,EAAYD,OAAO,kBCY/BqB,MA9Bf,WAAgC,IAAD,EACOT,mBAAS,IADhB,mBACtBX,EADsB,KACVY,EADU,KA2B7B,OAxBAC,qBAAU,WACRC,MAAM,2CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASK,UAC1BN,MAAK,SAAAO,GAAG,OAAI,IAAIC,OAAOC,WAAYC,gBAAgBH,EAAK,eACxDP,MAAK,SAAAG,GAGJ,IAFA,IAAIZ,EAAQC,EAAQC,EAChBkB,EAAQR,EAAKS,iBAAiB,QACzBC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC2B,QAAvDF,EAAME,GAAGE,cAAc,kBAAkBC,YAC3CzB,EAASoB,EAAME,GAAGE,cAAc,gBAAgBC,WAES,QAAvDL,EAAME,GAAGE,cAAc,kBAAkBC,YAC3CxB,EAASmB,EAAME,GAAGE,cAAc,gBAAgBC,WAES,QAAvDL,EAAME,GAAGE,cAAc,kBAAkBC,YAC3CvB,EAASkB,EAAME,GAAGE,cAAc,gBAAgBC,WAIpD,IAAI/B,EAAaK,EAAUC,EAAQC,EAAQC,GAC3CI,EAAcZ,QAEjB,IAEI,kBAAC,EAAD,CAAMA,WAAYA,EAAYD,OAAO,gBCP/BiC,MApBf,WAA4B,IAAD,EACWrB,mBAAS,IADpB,mBAClBX,EADkB,KACNY,EADM,KAiBzB,OAdAC,qBAAU,WACRC,MACE,yFAECC,MAAK,SAASC,GACb,OAAOA,EAASC,UAEjBF,MAAK,SAASG,GAAO,IAAD,EACOA,EAAKe,MAC3BjC,EAAaK,EAFE,EACX6B,IADW,EACNC,IADM,EACDC,KAElBxB,EAAcZ,QAEjB,IAEI,kBAAC,EAAD,CAAMA,WAAYA,EAAYD,OAAO,2BCA/BsC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACEvC,OAAO,eAGT,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJcwC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.e223e7d9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Data.css\";\r\n\r\nfunction Data({ header, currencies: { EURAUD, EURUSD, EURNOK } }) {\r\n  return (\r\n    <div>\r\n      <h3>{header}</h3>\r\n      <p>{EURAUD}</p>\r\n      <p>{EURUSD}</p>\r\n      <p>{EURNOK}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Data;\r\n\r\nData.propTypes = {\r\n  header: PropTypes.string.isRequired,\r\n  currencies: PropTypes.shape({\r\n    EURAUD: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    EURUSD: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    EURNOK: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n  })\r\n};\r\n\r\nData.defaultProps = {\r\n  currencies: {\r\n    EURAUD: \"AUD\",\r\n    EURUSD: \"USD\",\r\n    EURNOK: \"NOK\"\r\n  }\r\n};\r\n","export default function baseToEUR(USDAUD, USDEUR, USDNOK) {\r\n  let EURAUD = (USDAUD / USDEUR).toFixed(2);\r\n  let EURUSD = (1 / USDEUR).toFixed(2);\r\n  let EURNOK = (USDNOK * USDEUR).toFixed(2);\r\n  return { EURAUD, EURUSD, EURNOK };\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport baseToEUR from \"./util/baseToEUR\";\r\nimport Data from \"./Data\";\r\n\r\nfunction ContainerApilayer() {\r\n  const [currencies, setCurrencies] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"http://apilayer.net/api/live?access_key=c252f5f007e91fd07637e86c7e4cf324\"\r\n    )\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(function(data) {\r\n        const { USDAUD, USDEUR, USDNOK } = data.quotes;\r\n\r\n        let currencies = baseToEUR(USDAUD, USDEUR, USDNOK);\r\n        setCurrencies(currencies);\r\n      });\r\n  }, []);\r\n\r\n  return <Data currencies={currencies} header=\"apilayer.net\" />;\r\n}\r\n\r\nexport default ContainerApilayer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport baseToEUR from \"./util/baseToEUR\";\r\nimport Data from './Data';\r\n\r\nfunction ContainerFloatrates() {\r\n  const [currencies, setCurrencies] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://www.floatrates.com/daily/usd.xml\")\r\n      .then(response => response.text())\r\n      .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\r\n      .then(data => {\r\n        let USDAUD, USDEUR, USDNOK;\r\n        let items = data.querySelectorAll(\"item\");\r\n        for (let i = 0; i < items.length; i++) {\r\n          if (items[i].querySelector(\"targetCurrency\").innerHTML === \"AUD\") {\r\n            USDAUD = items[i].querySelector(\"exchangeRate\").innerHTML;\r\n          }\r\n          if (items[i].querySelector(\"targetCurrency\").innerHTML === \"EUR\") {\r\n            USDEUR = items[i].querySelector(\"exchangeRate\").innerHTML;\r\n          }\r\n          if (items[i].querySelector(\"targetCurrency\").innerHTML === \"NOK\") {\r\n            USDNOK = items[i].querySelector(\"exchangeRate\").innerHTML;\r\n          }\r\n        }\r\n\r\n        let currencies = baseToEUR(USDAUD, USDEUR, USDNOK);\r\n        setCurrencies(currencies);\r\n      });\r\n  }, []);\r\n\r\n  return <Data currencies={currencies} header=\"Floatrates\" />;\r\n}\r\n\r\nexport default ContainerFloatrates;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport baseToEUR from \"./util/baseToEUR\";\r\nimport Data from \"./Data\";\r\n\r\nfunction ContainerOpenEx() {\r\n  const [currencies, setCurrencies] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://openexchangerates.org/api/latest.json?app_id=e0562836e26b45d0bc184ccaa779cf5c\"\r\n    )\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(function(data) {\r\n        const { AUD, EUR, NOK } = data.rates;\r\n        let currencies = baseToEUR(AUD, EUR, NOK);\r\n        setCurrencies(currencies);\r\n      });\r\n  }, []);\r\n\r\n  return <Data currencies={currencies} header=\"openexchangerates.org\" />;\r\n}\r\n\r\nexport default ContainerOpenEx;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Data from \"./components/Data\";\nimport ContainerApilayer from \"./components/ContainerApilayer\";\nimport ContainerFloatrates from \"./components/ContainerFloatrates\";\nimport ContainerOpenEx from \"./components/ContainerOpenEx\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Data\n        header=\"currencies\"\n        // currencies={{ EURAUD: \"AUD\", EURUSD: \"USD\", EURNOK: \"NOK\" }}\n      />\n      <ContainerApilayer />\n      <ContainerOpenEx />\n      <ContainerFloatrates />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}